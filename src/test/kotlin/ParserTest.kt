import io.kotlintest.matchers.startWith
import io.kotlintest.should
import io.kotlintest.specs.StringSpec
import java.net.Socket
import com.nhaarman.mockitokotlin2.*
import io.kotlintest.TestCase
import org.slf4j.LoggerFactory
import java.lang.invoke.MethodHandles

@ExperimentalUnsignedTypes
class ParserTest : StringSpec() {
    lateinit var sc: ServerConnection

    companion object {
        private val LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass())
    }

    override fun beforeTest(testCase: TestCase) {
        val socket = mock<Socket> {}
        sc = ServerConnection(socket)
    }

    init {
        "Parsing version data" {
            LOG.info("Test 1")
            //val data = byteArrayOf(0x51, 0x42, 0x55, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00,
            //    0xff.toByte(), 0x00, 0x05,
            //    0x2a ,0x07, 0x00, 0x00, 0x04, 0x23)

            val data = byteArrayOf(
                0x51, 0x42, 0x55, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff.toByte(), 0x00, 0x10,
                0x2a, 0x07, 0x00, 0x00, 0x04, 0x00, 0x07, 0x00, 0x50, 0x4d, 0x02, 0x07, 0x03, 0x0a, 0x00, 0x23
            )
            sc.parse(data)
        }
        "Parsing login data" {
            LOG.info("Test 2")
            val data = byteArrayOf(
                0x51, 0x42, 0x55, 0x53, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xfa.toByte(), 0x00, 0x04, 0x2a, 0x00, 0x00, 0x23,

                0x51, 0x42, 0x55, 0x53, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xfa.toByte(), 0x00, 0x1f, 0x2a, 0x02, 0x57, 0x65,
                0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f,
                0x20, 0x51, 0x42, 0x55, 0x53, 0x20, 0x54, 0x43,
                0x50, 0x2f, 0x49, 0x50, 0x20, 0x76, 0x36, 0x2e,
                0x30, 0x36, 0x23,
                0x51, 0x42, 0x55, 0x53, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xff.toByte(), 0x00, 0x10, 0x2a, 0x0d, 0x0d, 0x00,
                0x07, 0x00, 0x07, 0xff.toByte(), 0xff.toByte(), 0xff.toByte(), 0xff.toByte(), 0xff.toByte(),
                0xff.toByte(), 0xff.toByte(), 0xff.toByte(), 0x23
            )
            sc.parse(data)
        }
        "Status update" {
            LOG.info("Status update")
            val data = ubyteArrayOf(
                0x51u, 0x42u, 0x55u, 0x53u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0xffu, 0x00u, 0x0du, 0x2au, 0x38u, 0x0cu, 0xffu,
                0x00u, 0x00u, 0x04u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x23u
            ).toByteArray()
            sc.parse(data)
        }
        "Event" {
            LOG.info("Event")
            val data2 = ubyteArrayOf(
                0x51u, 0x42u, 0x55u, 0x53u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0xffu, 0x00u, 0x08u, 0x2au, 0x35u, 0x07u, 0x00u,
                0x00u, 0xffu, 0x00u, 0x23u
            ).toByteArray()
            sc.parse(data2)
        }
        "FAT data" {
            LOG.info("FAT data")
            val data2 = ubyteArrayOf(
                0x51u, 0x42u, 0x55u, 0x53u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0xffu, 0x00u, 0x09u, 0x2au, 0x09u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x02u, 0x23u
            ).toByteArray()
            sc.parse(data2)
        }
        "SD header" {
            LOG.info("SD header")
            val data2 = ubyteArrayOf(
                0x51u, 0x42u, 0x55u, 0x53u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0xffu, 0x01u, 0xe8u, 0x2au, 0x44u, 0x29u, 0xffu,
                0xefu, 0x00u, 0xefu, 0x4au, 0x53u, 0x4fu, 0x4eu, 0x44u,
                0x42u, 0x7cu, 0x33u, 0x31u, 0x36u, 0x36u, 0x7cu, 0x34u,
                0x38u, 0x30u, 0x7cu, 0x32u, 0x30u, 0x32u, 0x30u, 0x2eu,
                0x30u, 0x33u, 0x2eu, 0x30u, 0x32u, 0x20u, 0x31u, 0x35u,
                0x3au, 0x30u, 0x38u, 0x3au, 0x33u, 0x31u, 0x7cu, 0x4au,
                0x53u, 0x4fu, 0x4eu, 0x2eu, 0x5au, 0x49u, 0x50u, 0x7cu,
                0x56u, 0x30u, 0x31u, 0x2eu, 0x31u, 0x37u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x23u
            ).toByteArray()
            sc.parse(data2)
        }
    }
}
